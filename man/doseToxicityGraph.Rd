% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/functions.R
\name{doseToxicityGraph}
\alias{doseToxicityGraph}
\title{Produce a Dose-Toxicity Curve}
\usage{
doseToxicityGraph(d, dose = Dose, lines = c("Mean", "Median"),
  ribbons = list(quantile = "Q\\\\d*"), quantiles = c(0.05, 0.1, 0.5,
  0.9, 0.95), colours = c(mean = "black", median = "blue", quantile =
  "steelblue"), yLabel = "p(Toxicity)", xLabel = "Dose",
  labels = c(quantile = "Posterior CIs", lines = "Dose-tox curve",
  quantile1 = "10\%-90\%", quantile2 = "20\%-80\%"), targetTox = 0.33,
  alphaRange = c(0.2, 0.4), defaultLegends = TRUE)
}
\arguments{
\item{d}{the input tibble, created by \code{createDoseSummary}, which
must be normalised}

\item{dose}{the column in \code{d} that defines the dose}

\item{lines}{a vector of \code{Parameter}s in \code{d} whose \code{Value}s
are to be represented as lines in the graph.  See Usage notes below.}

\item{ribbons}{a list of sets of (pairs of) \code{Parameter}s whose
\code{Value}s define low and high bounds of ribbons on the plot.  Each list
element defines a separate set of ribbons.  Each entry (of two
\code{Parameter} values) within each list element defines a seperate ribbon
within a set.  By default, \code{Parameter}s that define quantiles undergo
special processing.  See Usage notes below.}

\item{quantiles}{the numeric quantiles represented by the quantile
\code{Parameter} values}

\item{colours}{a named vector defining the colours to be used in the various
plot elements.  the names define the plot elemets, the values define the
colour to be used in the corresponding element}

\item{yLabel}{the text to be used to label the y axis}

\item{xLabel}{the text to be used to label the x axis}

\item{labels}{a named list of legend and category labels.  The names define
the legend titles and elements.  The values define the text to label the
corresponding element.  See Usage notes below.}

\item{targetTox}{a scalar or two element vector defining the target toxicity
rate (if scalar) or band (if a vector).}

\item{alphaRange}{a two element vector defining the upper and lower bounds
for the alpha (1 minus the transparency) level used to paint all ribbons in
the graph.}

\item{defaultLegends}{if \code{TRUE} apply default legends to the various
graph elements.  If \code{FALSE} no legends are defined, the value of
code{labels} is ignored and the resulting plot will almost certainly need
custom post-processing to be useful}
}
\value{
a ggplot object containing the requested plot
}
\description{
Produce a dose-toxicity curve with posterior credible intervals for the
probability of toxicity at each dose.  Optionally, display the target toxicity
rate (for CRM and oCRM studies) or the target toxicity band (for nCRM
studies).
}
\section{Usage notes}{

TODO: Fix the colour of legend entries for ribbons.  Their transparency is correct.
TODO: Allow custom colour for the target toxicity rate/band
TODO: Allow wild card specification for all ribbon specifications.

The input tibble is \code{spread} so that \code{Parameter} values become
column names for use in the plot.

The definition of ribbons is complex at first sight, but highly flexible.  If
\code{ribbons=list("ribbonA"=list(c("Stat1", "Stat2"), c(("Stat3", "Stat4"))))}
then a single set of two ribbons will be produced.  The first ribbon is
runs from \code{Value}s corresponding to \code{Parameter == "Stat1"}
(the lower limit of the ribbon) to \code{Value}s corresponding to
\code{Parameter == "Stat2"} (the upper limit of the ribbon).  The definition
of the second ribbon is similar.  The ribbons are drawn in the order they
appear in the list and so there is an assumption that the ribbons get
narrower as the length of the list increases.  In other words, after the input
tibble has been \code{spread}, that Stat1 < Stat2 < Stat3 < Stat4.

Continuing the example above, if \code{labels=c("ribbonA"="My ribbon label", "ribbonA1"="First category", "ribbonA2"="Second label")}
then the corresponding legend has a title of "My ribbon label" and its two
entries are labelled "First category" and "Second category".

Quantile ribbons undergo special pre-processing.  By default, quantiles are
flagged by \code{Parameter} values of the form "Q<x>", where <x> is a
positive integer.  First, if the \code{quantiles} list contains the value 0.5
in its ith element, then \code{Parameter} values of "Q<i>" are changed to
"Median".  Then the remaining "Q<x>" values are paired.  If there are n
remaining elements, the pairs are ("Q<1>", Q<n>"), ("Q<2>", Q<n-1>") and
so on.  These pairs are then processed as described above.
}

\examples{
x <- runjagsToTibble(generateOCRMData(chainLength=1000)[["posterior"]])
x <- augmentOCRMData(x)
y <- createDoseSummary(x, var=Prob1) \%>\% dplyr::filter(Statistic != "SD")
doseToxicityGraph(y, targetTox=c(0.15, 0.30))
}
